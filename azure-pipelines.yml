trigger:
  branches:
    include:
      - develop
      - qa
      - main

pr: none

pool:
  vmImage: "ubuntu-latest"

# Make sure to replace 'your-image-registry' with the name of your actual Azure Container Registry
variables:
  GIT_CLONE_PATH: "$(Build.SourcesDirectory)"
  IMAGE_NAME: "your-image-registry.azurecr.io" # Replace 'your-image-registry' with your actual image registry name
  NODE_VERSION: "18.x"

stages:
  - stage: QualityGate
    displayName: "Quality Gate & Testing"
    jobs:
      - job: CodeQuality
        displayName: "Code Quality Checks"
        steps:
          - task: NodeTool@0
            displayName: "Setup Node.js"
            inputs:
              versionSpec: "$(NODE_VERSION)"

          - script: |
              echo "üì¶ Installing dependencies..."
              npm ci
            displayName: "Install Dependencies"

          - script: |
              echo "üîç Running TypeScript type checking..."
              npm run type-check
            displayName: "TypeScript Type Check"

          - script: |
              echo "üßπ Running ESLint..."
              npm run lint
            displayName: "ESLint Check"

          - script: |
              echo "üé® Checking code formatting..."
              npm run format
            displayName: "Prettier Format Check"

          - script: |
              echo "üß™ Running tests..."
              npm run test:coverage
            displayName: "Run Tests with Coverage"
            continueOnError: true

          - script: |
              echo "üèóÔ∏è Building application..."
              npm run build
            displayName: "Build Application"

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "coverage/junit.xml"
              mergeTestResults: true
            condition: succeededOrFailed()

          - task: PublishCodeCoverageResults@1
            displayName: "Publish Code Coverage"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "coverage/cobertura-coverage.xml"
            condition: succeededOrFailed()

  - stage: Build
    displayName: "Build & Push Images"
    dependsOn: QualityGate
    condition: succeeded()
    jobs:
      - job: Build_Dev
        displayName: "Build DEV"
        steps:
          - script: |
              chmod +x ./setup_env.sh
              ./setup_env.sh DEV
              docker build -t $(IMAGE_NAME):$(TAG_IMAGE_DEV) -f .docker/Dockerfile .
            displayName: "Build DEV environment"
            pool:
              name: NAME-frontend-develop # Replace 'NAME-frontend-develop' with your agent pool name
          - script: docker login -u $(DOCKER_REGISTRY_USERNAME) -p $(DOCKER_REGISTRY_PASSWORD) your-image-registry.azurecr.io
            displayName: "Docker login"

          - script: docker push $(IMAGE_NAME):$(TAG_IMAGE_DEV)
            displayName: "Push DEV image"

        condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')

      - job: Build_QA
        displayName: "Build QA"
        steps:
          - script: |
              chmod +x ./setup_env.sh
              ./setup_env.sh QA
              docker build -t $(IMAGE_NAME):$(TAG_IMAGE_QA) -f .docker/Dockerfile .
              docker build -t $(IMAGE_NAME):$(Build.SourceVersion) -f .docker/Dockerfile .
            displayName: "Build QA environment"
            pool:
              name: NAME-frontend-qa # Replace 'NAME-frontend-qa' with your agent pool name
          - script: docker login -u $(DOCKER_REGISTRY_USERNAME) -p $(DOCKER_REGISTRY_PASSWORD) your-image-registry.azurecr.io
            displayName: "Docker login"

          - script: |
              docker push $(IMAGE_NAME):$(TAG_IMAGE_QA)
              docker push $(IMAGE_NAME):$(Build.SourceVersion)
            displayName: "Push QA images"

        condition: eq(variables['Build.SourceBranch'], 'refs/heads/qa')

      - job: Build_Prod
        displayName: "Build PROD"
        steps:
          - script: |
              chmod +x ./setup_env.sh
              ./setup_env.sh PROD
              docker build -t $(IMAGE_NAME):$(TAG_IMAGE_PROD) .
              docker build -t $(IMAGE_NAME):$(Build.SourceVersion) .
            displayName: "Build PROD environment"
            pool:
              name: NAME-frontend-production # Replace 'NAME-frontend-production' with your agent pool name
          - script: docker login -u $(DOCKER_REGISTRY_USERNAME) -p $(DOCKER_REGISTRY_PASSWORD) your-image-registry.azurecr.io
            displayName: "Docker login"

          - script: |
              docker push $(IMAGE_NAME):$(TAG_IMAGE_PROD)
              docker push $(IMAGE_NAME):$(Build.SourceVersion)
            displayName: "Push PROD images"

        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: Deploy_Dev
        displayName: "Deploy DEV"
        steps:
          - script: |
              docker-compose -f .docker/docker-compose.yml up -d
            displayName: "Deploy DEV environment"
            pool:
              name: NAME-frontend-develop # Replace 'NAME-frontend-develop' with your agent pool name
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')

      - job: Deploy_QA
        displayName: "Deploy QA"
        steps:
          - script: |
              docker-compose -f .docker/docker-compose.yml up -d
            displayName: "Deploy QA environment"
            pool:
              name: NAME-frontend-qa # Replace 'NAME-frontend-qa' with your agent pool name
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/qa')

      - job: Deploy_Prod
        displayName: "Deploy PROD"
        steps:
          - script: |
              docker-compose -f .docker/docker-compose.yml up -d
            displayName: "Deploy PROD environment"
            pool:
              name: NAME-frontend-production # Replace 'NAME-frontend-production' with your agent pool name
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
